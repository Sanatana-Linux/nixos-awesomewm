local awful = require("awful")
local helpers = require("helpers")
local wibox = require("wibox")
local gears = require("gears")
local json = require("mods.json")
local beautiful = require("beautiful")
local dpi = beautiful.xresources.apply_dpi

local themes = {
    "3024",
    "apathy",
    "apprentice",
    "ashes",
    "ateliercave",
    "ateliercavelight",
    "atelierdune",
    "atelierdunelight",
    "atelierestuary",
    "atelierestuarylight",
    "atelierforest",
    "atelierforestlight",
    "atelierheath",
    "atelierheathlight",
    "atelierlakeside",
    "atelierlakesidelight",
    "atelierplateau",
    "atelierplateaulight",
    "ateliersavanna",
    "ateliersavannalight",
    "atelierseaside",
    "atelierseasidelight",
    "ateliersulphurpool",
    "ateliersulphurpoollight",
    "atlas",
    "ayudark",
    "ayulight",
    "ayumirage",
    "bespin",
    "biscuit",
    "blackmetal",
    "blackmetalbathory",
    "blackmetalburzum",
    "blackmetaldarkfuneral",
    "blackmetalgorgoroth",
    "blackmetalimmortal",
    "blackmetalkhold",
    "blackmetalmarduk",
    "blackmetalmayhem",
    "blackmetalnile",
    "blackmetalvenom",
    "blueforest",
    "blueish",
    "brewer",
    "bright",
    "brogrammer",
    "brushtrees",
    "brushtreesdark",
    "caroline",
    "cat",
    "catppuccinfrappe",
    "catppuccinlatte",
    "catppuccinmacchiato",
    "catppuccinmocha",
    "chalk",
    "circus",
    "classicdark",
    "classiclight",
    "codeschool",
    "colors",
    "cupcake",
    "cupertino",
    "danqing",
    "danqinglight",
    "daoneblack",
    "daonegray",
    "daoneocean",
    "daonepaper",
    "daonesea",
    "daonewhite",
    "darcula",
    "darkmoss",
    "darktooth",
    "darkviolet",
    "decaf",
    "decay",
    "defaultdark",
    "defaultlight",
    "dirtysea",
    "dracula",
    "edgedark",
    "edgelight",
    "eighties",
    "embers",
    "emil",
    "equilibriumdark",
    "equilibriumgraydark",
    "equilibriumgraylight",
    "equilibriumlight",
    "eris",
    "espresso",
    "eva",
    "evadim",
    "evenokdark",
    "everblush",
    "everforest",
    "everforestdarkhard",
    "flat",
    "forest",
    "fovere",
    "framer",
    "fruitsoda",
    "fullerene",
    "gigavolt",
    "github",
    "googledark",
    "googlelight",
    "gotham",
    "grayscaledark",
    "grayscalelight",
    "greenscreen",
    "gruber",
    "gruvboxdarkhard",
    "gruvboxdarkmedium",
    "gruvboxdarkpale",
    "gruvboxdarksoft",
    "gruvboxlighthard",
    "gruvboxlightmedium",
    "gruvboxlightsoft",
    "gruvboxmaterialdarkhard",
    "gruvboxmaterialdarkmedium",
    "gruvboxmaterialdarksoft",
    "gruvboxmateriallighthard",
    "gruvboxmateriallightmedium",
    "gruvboxmateriallightsoft",
    "hardcore",
    "harmonic16dark",
    "harmonic16light",
    "heetchdark",
    "heetchlight",
    "helios",
    "hopscotch",
    "horizondark",
    "horizonlight",
    "horizonterminaldark",
    "horizonterminallight",
    "humanoiddark",
    "humanoidlight",
    "iadark",
    "ialight",
    "icydark",
    "irblack",
    "isotope",
    "kanagawa",
    "katy",
    "kimber",
    "kizu",
    "lime",
    "londontube",
    "macintosh",
    "marrakesh",
    "materia",
    "material",
    "materialdarker",
    "materiallighter",
    "materialpalenight",
    "materialvivid",
    "mellowpurple",
    "mexicolight",
    "mocha",
    "monokai",
    "monokaipro",
    "monokaiproclassic",
    "monokaipromachine",
    "monokaiprooctogon",
    "monokaiproristretto",
    "monokaiprospectrum",
    "mountain",
    "nebula",
    "nirvana",
    "nord",
    "nova",
    "ocean",
    "oceanicnext",
    "onedark",
    "onelight",
    "outrundark",
    "oxo",
    "oxocarbondark",
    "oxocarbonlight",
    "pandora",
    "papercolordark",
    "papercolorlight",
    "paraiso",
    "pasque",
    "phd",
    "pico",
    "pinky",
    "pop",
    "porple",
    "primerdark",
    "primerdarkdimmed",
    "primerlight",
    "purpledream",
    "qualia",
    "railscasts",
    "rebecca",
    "rose",
    "rosepine",
    "rosepinedawn",
    "rosepinemoon",
    "sagelight",
    "sakura",
    "sandcastle",
    "selenized",
    "setiui",
    "shadesmeardark",
    "shadesmearlight",
    "shadesofpurple",
    "shapeshifter",
    "silkdark",
    "silklight",
    "snazzy",
    "solarflare",
    "solarflarelight",
    "solarized",
    "solarizeddark",
    "solarizedlight",
    "spaceduck",
    "spacemacs",
    "standardized",
    "stardewnight",
    "stella",
    "stillalive",
    "summercamp",
    "summerfruitdark",
    "summerfruitlight",
    "swamp",
    "sweetpastel",
    "synthmidnightterminaldark",
    "synthmidnightterminallight",
    "tango",
    "tarot",
    "tender",
    "tokyocitydark",
    "tokyocitylight",
    "tokyocityterminaldark",
    "tokyocityterminallight",
    "tokyodark",
    "tokyodarkterminal",
    "tokyonightdark",
    "tokyonightlight",
    "tokyonightstorm",
    "tokyonightterminaldark",
    "tokyonightterminallight",
    "tokyonightterminalstorm",
    "tomorrow",
    "tomorrownight",
    "tomorrownighteighties",
    "twilight",
    "unikittydark",
    "unikittylight",
    "unikittyreversible",
    "uwunicorn",
    "verdant",
    "vice",
    "vixima",
    "vulcan",
    "windows10",
    "windows10light",
    "windows95",
    "windows95light",
    "windowshighcontrast",
    "windowshighcontrastlight",
    "windowsnt",
    "windowsntlight",
    "woodland",
    "xcodedusk",
    "zenbones",
    "zenburn",
}

local index = helpers.indexOf(themes, beautiful.scheme)

local M = {
    current = beautiful.scheme,
    colors = {
        red = beautiful.red,
        green = beautiful.green,
        yellow = beautiful.yellow,
        blue = beautiful.blue,
        magenta = beautiful.magenta,
        bg = beautiful.bg,
        fg = beautiful.fg,
    },
}

function M:previous()
    index = index - 1
    if index < 1 then
        index = #themes
    end
    M:getColors(themes[index])
    M:setColors()
end

function M:next()
    index = index + 1
    if index > #themes then
        index = 1
    end
    M:getColors(themes[index])
    M:setColors()
end

function M:getColors(scheme)
    scheme = scheme or self.current
    local colors = require("theme.colors." .. scheme)
    self.colors = colors
    self.current = scheme
end

function M:setColors()
    helpers.gc(self.widget, "red").bg = self.colors.err
    helpers.gc(self.widget, "blue").bg = self.colors.pri
    helpers.gc(self.widget, "green").bg = self.colors.ok
    helpers.gc(self.widget, "yellow").bg = self.colors.warn
    helpers.gc(self.widget, "magenta").bg = self.colors.dis
    helpers.gc(self.widget, "fg").bg = self.colors.fg
    helpers.gc(self.widget, "bg").bg = self.colors.mbg
    helpers.gc(self.widget, "name").markup =
        self.current:gsub("^%l", string.upper)
end

M.widget = wibox.widget({
    {
        {
            {
                {
                    id = "name",
                    markup = M.current,
                    font = beautiful.sans .. " 14",
                    widget = wibox.widget.textbox,
                },
                nil,
                {
                    {
                        markup = "󰅁",
                        font = beautiful.icon .. " 18",
                        widget = wibox.widget.textbox,
                        buttons = {
                            awful.button({}, 1, function()
                                M:previous()
                            end),
                        },
                    },
                    {
                        markup = "󰅂",
                        font = beautiful.icon .. " 18",
                        widget = wibox.widget.textbox,
                        buttons = {
                            awful.button({}, 1, function()
                                M:next()
                            end),
                        },
                    },
                    layout = wibox.layout.fixed.horizontal,
                },
                layout = wibox.layout.align.horizontal,
            },
            {
                {
                    {
                        id = "red",
                        widget = wibox.container.background,
                        forced_height = 60,
                        forced_width = 60,
                        bg = M.colors.red,
                    },
                    {
                        id = "green",
                        widget = wibox.container.background,
                        forced_height = 60,
                        forced_width = 60,
                        bg = M.colors.green,
                    },
                    {
                        id = "yellow",
                        widget = wibox.container.background,
                        forced_height = 60,
                        forced_width = 60,
                        bg = M.colors.yellow,
                    },
                    {
                        id = "blue",
                        widget = wibox.container.background,
                        forced_height = 60,
                        forced_width = 60,
                        bg = M.colors.blue,
                    },
                    {
                        id = "magenta",
                        widget = wibox.container.background,
                        forced_height = 60,
                        forced_width = 60,
                        bg = M.colors.magenta,
                    },
                    {
                        id = "fg",
                        widget = wibox.container.background,
                        forced_height = 60,
                        forced_width = 60,
                        bg = M.colors.fg,
                    },
                    spacing = 20,
                    layout = wibox.layout.fixed.horizontal,
                },
                valign = "center",
                halign = "center",
                widget = wibox.container.place,
            },
            nil,
            layout = wibox.layout.align.vertical,
        },
        widget = wibox.container.margin,
        margins = dpi(12),
    },
    id = "bg",
    forced_height = dpi(200),
    shape = helpers.rrect(10),
    widget = wibox.container.background,
    bg = M.colors.bg,
})

M:getColors(beautiful.scheme)
M:setColors()

return M
